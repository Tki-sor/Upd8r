buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven {
            url "https://repo.spongepowered.org/repository/maven-public/"
            // content { includeGroup "org.spongepowered" }
        }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

loom {
    mixin {
        add sourceSets.main, "upd8r.refmap.json"
    }
}

//apply plugin: "org.spongepowered.mixin"
//apply plugin: 'net.minecraftforge.gradle.forge'
//apply plugin: 'org.spongepowered.mixin'

//apply plugin: 'org.spongepowered.mixin'
architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    maven { url "https://thedarkcolour.github.io/KotlinForForge/" }
}

dependencies {
    forge "net.minecraftforge:forge:${forge_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    implementation "me.shedaniel.cloth:cloth-config-forge:${cloth_config_version}"
    implementation "thedarkcolour:kotlinforforge:${kotlin_for_forge_version}"
    forgeRuntimeLibrary("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version")
    forgeRuntimeLibrary("org.jetbrains.kotlin:kotlin-reflect:$kotlin_version")

    implementation "dev.latvian.mods:kubejs-forge:${kubejs_version}"
    implementation "dev.latvian.mods:rhino-forge:${rhino_version}"


}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        maven { url "https://maven.shedaniel.me/" }
        maven { url "https://repo.spongepowered.org/maven" }
    }
}